<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="$(SolutionDir)\tools\DbSchemaTool\DbSchemaTool.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.Common" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="DbSchemaTool" #>
<#@ import namespace="DbSchemaTool.Infrastructure" #>
<#@ import namespace="DbSchemaTool.Infrastructure.StringFilters" #>
<#@ import namespace="DbSchemaTool.Infrastructure.DataTypes" #>
<#@ output extension=".generated.cs" #>
<#
    var modelNamespace = "WpfSamples.Models";
    var contextName = "NorthwindDbContext";
    var connectionName = "NorthwindDb";
    var connectionString = "data source=localhost\\SQLEXPRESS;initial catalog=Northwind;integrated security=True;MultipleActiveResultSets=True;";


    var schemaManager = new SchemaManager(connectionString);
    var tables = schemaManager.GetTables();
    var associations = schemaManager.GetAssociations();
#>
<#  foreach(var table in tables){ 
        // EntityFrameworkCore cannot map "hierarchyid"
        if( table.PrimaryKeyColumns.Any(x => table.Columns.Any(y => y.ColumnName == x && y.DataType == "hierarchyid"))){
            continue;
        }
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
namespace <#= modelNamespace #>.Entities
{
    [Table("<#= table.TableSchema #>.<#= table.TableName#>")]
    public partial class <#= Inflector.Currnet.Singularize(table.ObjectName) #>
    {
        public <#= Inflector.Currnet.Singularize(table.ObjectName) #>()
        {
<#      foreach(var column in table.Columns){ 
            // hierarchyid is not supported on .NET Framework 4.7
            if(column.DataType == "hierarchyid") {  continue;  } 
            if(column.DefaultValue == null){ #>
            <#= column.ObjectName #> = null;<#
            } else { 
                if(column.DataType == "date" || column.DataType == "datetime" || column.DataType == "datetime2" || column.DataType == "smalldatetime"){ #>
            <#= column.ObjectName #> = DateTime.Parse(<#= column.DefaultValueLiteral #>);<#
            } else if(column.DataType == "time"){ #>
            <#= column.ObjectName #> = TimeSpan.Parse(<#= column.DefaultValueLiteral #>);<#
            } else if(column.DataType == "uniqueidentifier"){ #>
            <#= column.ObjectName #> = Guid.Parse(<#= column.DefaultValueLiteral #>);<#
            } else { #>
            <#= column.ObjectName #> = <#= column.DefaultValueLiteral #>;<#
                } 
            } 
      } 
#>
<#  
        // このテーブルを参照する
        foreach (var association in associations.Where(x => x.PrincipalRole.RoleName == table.TableName).OrderBy(x => x.DependentRole.RoleName))
        {
            var baseTable = tables.FirstOrDefault(x => x.TableName == association.DependentRole.RoleName);
            // base tableの主キーに hierarchyidが含まれている場合は除外する
            if( baseTable.PrimaryKeyColumns.Any(x => baseTable.Columns.Any(y => y.ColumnName == x && y.DataType == "hierarchyid"))){
                    continue;
            }
           var variableName = Inflector.Currnet.Pluralize(association.DependentRole.ReferenceName);
            if(association.DependentRole.Multiplicity == "*"){
#>
            <#= variableName  #> = new HashSet<<#= Inflector.Currnet.Singularize(baseTable.ObjectName) #>>();<#
            }
        }
#>

        }

<#      foreach(var column in table.Columns){
            // hierarchyid is not supported on .NET Framework 4.7
            if(column.DataType == "hierarchyid") {  
                continue;
            }#>
        ///<summary><#= column.Description ?? $"column:{column.ColumnName}" #></summary>
<# 
            if(table.PrimaryKeyColumns.Any(x => x == column.ColumnName)) {  #>
        [Key]<#
        }
            if(!table.PrimaryKeyColumns.Any() && column.OrdinalPosition == 1) {  #>
        [Key]<#
        }
            if(column.ObjectType.IsClass && column.IsNullable == "NO") {  #>
        [Required]<#
        } 
            if(table.PrimaryKeyColumns.Any(x => x == column.ColumnName)){  
#>
        [Column("<#= column.ColumnName #>", Order = <#= column.OrdinalPosition - 1 #>, TypeName = "<#= column.DataType #>")]<#
        }  
            else if(table.Constraints.Any(x => x.ConstraintColumns.Any(y => y.ColumnName == column.ColumnName))){  
#>
        [Column("<#= column.ColumnName #>")]<#
        }  
            else{  
#>
        [Column("<#= column.ColumnName #>", Order = <#= column.OrdinalPosition - 1 #>, TypeName = "<#= column.DataType #>")]<#
        }  
            if(column.IsIdentity == "YES")  {  #>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]<#
        } #>
        public <#= column.ObjectTypeName #> <#= column.ObjectName #> { get; set; }

<#      } 
  
        // このテーブルを参照する
        foreach (var association in associations.Where(x => x.PrincipalRole.RoleName == table.TableName).OrderBy(x => x.DependentRole.RoleName))
        {
            var baseTable = tables.FirstOrDefault(x => x.TableName == association.DependentRole.RoleName);
            if( baseTable.PrimaryKeyColumns.Any(x => baseTable.Columns.Any(y => y.ColumnName == x && y.DataType == "hierarchyid"))){
                    continue;
            }
            if(association.DependentRole.Multiplicity == "*"){
                var variableName = Inflector.Currnet.Pluralize(association.DependentRole.ReferenceName);
#>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<<#= Inflector.Currnet.Singularize( baseTable.ObjectName )  #>> <#= variableName  #> { get; set; }<#                
            }
            else{
#>
        public virtual <#= Inflector.Currnet.Singularize( baseTable.ObjectName ) #> <#= association.DependentRole.ReferenceName #> { get; set; }<#                
            }
        }
        // このテーブルが参照する
        foreach (var association in associations.Where(x => x.DependentRole.RoleName == table.TableName).OrderBy(x => x.PrincipalRole.RoleName))
        {
            var referencedTable = tables.FirstOrDefault(x => x.TableName == association.PrincipalRole.RoleName);
                // hierarchyid is not supported on .NET Framework 4.7
                //if( fkey.ReferencedTable.PrimaryKeyColumns.Any(x => fkey.ReferencedTable.Columns.Any(y => y.ColumnName == x && y.DataType == "hierarchyid"))){
                //     continue;
                //}
                var required = association.DependentRole.Required;
#>
        public virtual <#= Inflector.Currnet.Singularize(referencedTable.ObjectName) #> <#= association.PrincipalRole.ReferenceName #> { get; set; }<#
        }
#>
    }
}
<#      SaveOutput("Entities\\" + table.ObjectName + ".generated.cs"); 
    } #>
<#+
private void SaveOutput(string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
  string outputFilePath = Path.Combine(templateDirectory, outputFileName);
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);

  var visualStudio = (this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
  var project = visualStudio.Solution.FindProjectItem(this.Host.TemplateFile).ContainingProject as EnvDTE.Project;
  project.ProjectItems.AddFromFile(outputFilePath);
}
#>